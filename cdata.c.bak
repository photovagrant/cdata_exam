#include <linux/module.h>
#include <linux/version.h>
#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/fs.h>
#include <linux/delay.h>
#include <linux/vmalloc.h>
#include <linux/sched.h>
#include <linux/timer.h>
#include <linux/mm.h>
#include <linux/interrupt.h>
#include <linux/irq.h>
#include <linux/miscdevice.h>
#include <linux/input.h>
#include <linux/mutex.h>
#include <linux/spinlock.h>
#include <asm/io.h>
#include <asm/uaccess.h>
#include "cdata_ioctl.h"
#include "linux/slab.h"
#include "linux/wait.h"

struct cdata_t {
	char *buf;
	unsigned int index;
	};

//static inline int register_chrdev(unsigned int major, const char *name,
//				  const struct file_operations *fops)
static int cdata_open(struct inode *inode,struct file *filp)
{
//cdata kmalloc 
struct cdata_t *cdata;

printk(KERN_INFO "cdata_open");
cdata=(struct cdata_t *)kmalloc(sizeof(struct cdata_t),GFP_KERNEL);
cdata->buf=(char *)kmalloc(1024,GFP_KERNEL);
cdata->index=0;
filp->private_data=(void *)cdata;

return 0;
}


static int cdata_release(struct inode *inode, struct file *filp)
{

printk(KERN_INFO "cdata_release");
return 0;
}


static ssize_t cdata_read(struct file *filp, char __user *buf, size_t size, loff_t *loff)
{

printk(KERN_INFO "cdata_read");
return 0;
}

static ssize_t cdata_write(struct file *filp, const char __user *buf, size_t size, loff_t *loff)
{
printk(KERN_INFO "cdata_write");
return 0;
}
static long cdata_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
{
		struct cdata_t *cdata;
		char *buf;
		unsigned int index;
		cdata=(struct cdata_t *)filp->private_data;
		index=cdata->index;
	//	buf=cdata->buf;
		printk(KERN_INFO "cdata_ioctl");
switch (cmd) {
	case IOCTL_EMPTY:
		printk(KERN_INFO "IOCTL_EMPTY %d \n",cmd);
		index=0;
		break;
	case IOCTL_SYNC:
		printk(KERN_INFO "IOCTL_SYNC%d \n",cmd);
		//struct cdata_t *cdata;
		//cdata=(struct cdata_t*)filp->private_data;
		cdata->buf[index]='\0';
		printk(KERN_INFO "ioctl data= %s\n",cdata->buf);
		break;
	case IOCTL_WRITE:
		printk(KERN_INFO "IOCTL_WRITE%d \n",cmd);
		cdata->buf[index++]=*((char *)arg);
		break;
	default:
		return -1;
	}
	cdata->index=index;
	



return 0;
}
static struct file_operations cdata_fops ={
	owner: 	THIS_MODULE,
	open:	cdata_open,
	release:	cdata_release,
	read:	cdata_read,
	write:	cdata_write,
	compat_ioctl:	cdata_ioctl,
};


static int cdata_init_module(void)
{
	printk(KERN_INFO "cdata_init");
	register_chrdev(121,"cdata",&cdata_fops);
	return 0;
}

static void cdata_cleanup_module(void)
{
unregister_chrdev(121,"cdata" );
}

module_init(cdata_init_module);
module_exit(cdata_cleanup_module);
MODULE_LICENSE("GPL");
